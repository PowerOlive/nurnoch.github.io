<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>wwt</title><link href="http://www.wengweitao.com/" rel="alternate"></link><link href="http://www.wengweitao.com/feeds%5Call.atom.xml" rel="self"></link><id>http://www.wengweitao.com/</id><updated>2015-04-05T00:00:00+08:00</updated><entry><title>哈哈</title><link href="http://www.wengweitao.com/ha-ha.html" rel="alternate"></link><updated>2015-04-05T00:00:00+08:00</updated><author><name>wwt</name></author><id>tag:www.wengweitao.com,2015-04-05:ha-ha.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;二分查找算法&lt;/strong&gt;&lt;br /&gt;
  二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；&lt;br /&gt;
  其缺点是要求待查表为有序表，且插入删除困难。&lt;br /&gt;
  因此，折半查找方法适用于不经常变动而查找频繁的有序列表 。&lt;br /&gt;
  首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；&lt;br /&gt;
  否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。&lt;br /&gt;
  重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Hello, world</title><link href="http://www.wengweitao.com/hello-world.html" rel="alternate"></link><updated>2014-07-20T00:00:00+08:00</updated><author><name>wwt</name></author><id>tag:www.wengweitao.com,2014-07-20:hello-world.html</id><summary type="html">&lt;p&gt;Hello, world!&lt;/p&gt;</summary></entry><entry><title>你好测试</title><link href="http://www.wengweitao.com/ni-hao-ce-shi.html" rel="alternate"></link><updated>2014-07-20T00:00:00+08:00</updated><author><name>wwt</name></author><id>tag:www.wengweitao.com,2014-07-20:ni-hao-ce-shi.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;二分查找算法&lt;/strong&gt;&lt;br /&gt;
  二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；&lt;br /&gt;
  其缺点是要求待查表为有序表，且插入删除困难。&lt;br /&gt;
  因此，折半查找方法适用于不经常变动而查找频繁的有序列表 。&lt;br /&gt;
  首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；&lt;br /&gt;
  否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。&lt;br /&gt;
  重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>数据结构与算法</title><link href="http://www.wengweitao.com/shu-ju-jie-gou-yu-suan-fa.html" rel="alternate"></link><updated>2014-07-20T00:00:00+08:00</updated><author><name>wwt</name></author><id>tag:www.wengweitao.com,2014-07-20:shu-ju-jie-gou-yu-suan-fa.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;&lt;a href="http://www.cs.usfca.edu/~galles/visualization/Algorithms.html"&gt;有趣的学习网站-EN&lt;/a&gt;&lt;/strong&gt;
* &lt;strong&gt;二分查找算法&lt;/strong&gt;&lt;br /&gt;
  二分查找又称折半查找，优点是比较次数少，查找速度快，平均性能好；&lt;br /&gt;
  其缺点是要求待查表为有序表，且插入删除困难。&lt;br /&gt;
  因此，折半查找方法适用于不经常变动而查找频繁的有序列表 。&lt;br /&gt;
  首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；&lt;br /&gt;
  否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。&lt;br /&gt;
  重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功&lt;/p&gt;
&lt;p&gt;源代码: 数据结构与算法复习/binary_search.rb  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;杨辉三角&lt;/strong&gt;&lt;br /&gt;
  前提：端点的数为1.  &lt;/li&gt;
&lt;li&gt;每个数等于它上方两数之和。  &lt;/li&gt;
&lt;li&gt;每行数字左右对称，由1开始逐渐变大。  &lt;/li&gt;
&lt;li&gt;第n行的数字有n项。  &lt;/li&gt;
&lt;li&gt;第n行数字和为2^(n-1)。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;源代码：数据结构与算法复习/yanghuisanjiao.rb  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://developer.51cto.com/art/201204/332798.htm"&gt;顺序表,链表,栈,队列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;树&lt;/li&gt;
&lt;li&gt;图&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/kkun/archive/2011/11/23/2260312.html"&gt;排序&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;快速排序 &amp;lt;基准&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;插入排序 当插入第i个元素时，前面的i-1个元素已经排列好,用Vi依次去比较前面的i-1个元素,找到合适的位置插入&lt;/li&gt;
&lt;li&gt;选择排序 直接从待排序数组里选择一个最小(或最大)的数字,每次都拿一个最小数字出来,顺序放入新数组,直到全部拿完&lt;/li&gt;
&lt;li&gt;归并排序(Merge sort) 把原始数组分成若干子数组,对每一个子数组进行排序,继续把子数组与子数组合并,合并后仍然有序,直到全部合并完,形成有序的数组&lt;/li&gt;
&lt;li&gt;基数排序 &amp;lt;排序码&amp;gt;&lt;/li&gt;
&lt;li&gt;桶排序(Bucket sort) 无序数组有个要求,就是成员隶属于固定(有限的)的区间,&lt;/li&gt;
&lt;li&gt;冒泡排序(交换排序) &amp;lt;内循环&amp;gt;&amp;lt;外循环&amp;gt; 临近的数字两两进行比较,按照从小到大或者从大到小的顺序进行交换&lt;/li&gt;
&lt;li&gt;希尔排序(Shell sort)  ??&lt;/li&gt;
&lt;li&gt;搜索&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="screenshot" src="/imgs/screenshot.png" /&gt;&lt;/p&gt;</summary></entry></feed>