<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>wwt's blog</title><link href="http://www.wengweitao.com/" rel="alternate"></link><link href="http://www.wengweitao.com/feeds/gong-ju.rss.xml" rel="self"></link><id>http://www.wengweitao.com/</id><updated>2016-04-17T22:48:00+08:00</updated><entry><title>在carina上使用Docker搭建免费的ShadowSocks</title><link href="http://www.wengweitao.com/zai-carinashang-shi-yong-dockerda-jian-mian-fei-de-shadowsocks.html" rel="alternate"></link><published>2016-04-17T22:48:00+08:00</published><author><name>wwt</name></author><id>tag:www.wengweitao.com,2016-04-17:zai-carinashang-shi-yong-dockerda-jian-mian-fei-de-shadowsocks.html</id><summary type="html">&lt;p&gt;&lt;a href="https://getcarina.com/"&gt;Carina&lt;/a&gt;是Rackspace旗下的一个网站，提供了Docker服务。最近，看到消息可以在该网站上注册账号，免费试用Docker服务。竟然有这么好的事，于是尝试注册了一个账号，搭建了一个免费的shadowsocks服务器。&lt;/p&gt;
&lt;h3&gt;账号注册&lt;/h3&gt;
&lt;p&gt;注册的过程需要发送验证码短信，才能注册成功。而且，不支持中国大陆的手机号。解决方法是在手机上下载 &lt;a href="https://go-text.me/"&gt;textme&lt;/a&gt;  APP，可以得到一个美国的虚拟手机号，用于发送和接收短信。得到虚拟手机号后，输入接收到的短信验证码即可成功注册。&lt;/p&gt;
&lt;h3&gt;创建cluster&lt;/h3&gt;
&lt;p&gt;登陆进去后，界面非常简单，点击&lt;code&gt;Add Cluster...&lt;/code&gt;新建一个docker集群，待会儿就在这个集群上面搭建shadowsocks服务。输入cluster的名称，这里我用&lt;code&gt;wwt&lt;/code&gt;，点击&lt;code&gt;Create Cluster&lt;/code&gt;，需要等待几分钟的时间即可创建完毕。&lt;/p&gt;
&lt;p&gt;&lt;img alt="cluster" src="http://ww3.sinaimg.cn/large/9f9f764egw1f2yg3kq0thj20fj0jaq4d.jpg" /&gt;&lt;/p&gt;
&lt;h3&gt;配置Docker CLI&lt;/h3&gt;
&lt;p&gt;点击cluster下面的按钮&lt;code&gt;Get access&lt;/code&gt;，下载一个Docker集群配置信息文件。&lt;/p&gt;
&lt;p&gt;解压后，进入该目录。source docker.env设置合适的docker环境变量：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; docker.env
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看是否连接上：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜ docker info
Containers: 11
Images: 6
Role: primary
Strategy: spread
Filters: health, port, dependency, affinity, constraint
Nodes: 1
 2ede2591-1ec0-4c2b-a3ef-59697ff02ba7-n1: 104.130.22.24:42376
  └ Status: Healthy
  └ Containers: 11
  └ Reserved CPUs: &lt;span class="m"&gt;0&lt;/span&gt; / 12
  └ Reserved Memory: &lt;span class="m"&gt;0&lt;/span&gt; B / 4.2 GiB
  └ Labels: com.docker.network.driver.overlay.bind_interface&lt;span class="o"&gt;=&lt;/span&gt;eth1, &lt;span class="nv"&gt;executiondriver&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;native-0.2, &lt;span class="nv"&gt;kernelversion&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;3.18.21-2-rackos, &lt;span class="nv"&gt;operatingsystem&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Debian GNU/Linux &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;wheezy&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;containerized&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="nv"&gt;storagedriver&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;aufs
  └ Error: &lt;span class="o"&gt;(&lt;/span&gt;none&lt;span class="o"&gt;)&lt;/span&gt;
  └ UpdatedAt: 2016-04-15T11:53:04Z
Kernel Version: 3.18.21-2-rackos
Operating System: linux
CPUs: 12
Total Memory: 4.2 GiB
Name: 2ede2591-1ec0-4c2b-a3ef-59697ff02ba7-n1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到cluster中结点的具体信息。&lt;/p&gt;
&lt;h3&gt;通过Docker安装shadowsocks&lt;/h3&gt;
&lt;p&gt;通过Docker安装shadowsocks非常方便，只需要一个命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -d --name shadowsocks -p 12306:12306 oddrationale/docker-shadowsocks -s 0.0.0.0 -p &lt;span class="m"&gt;12306&lt;/span&gt; -k yourpassword -m aes-256-cfb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;-p是设置shadowsocks的服务器端口号；-k后面设置自己的密码。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;docker ps&lt;/code&gt;查看是否安装成功：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  docker ps                                                                                                                        
CONTAINER ID        IMAGE                             COMMAND                CREATED                  STATUS              PORTS                            NAMES
1016c8cc0ce4        oddrationale/docker-shadowsocks   &lt;span class="s2"&gt;&amp;quot;/usr/local/bin/ssse   Less than a second ago   Up 22 seconds       104.130.22.24:12306-&amp;gt;12306/tcp   2ede2591-1ec0-4c2b-a3ef-59697ff02ba7-n1/shadowsocks   &lt;/span&gt;
&lt;span class="s2"&gt;b47dd901c3dd        carina/consul                     &amp;quot;&lt;/span&gt;/bin/consul agent -   &lt;span class="m"&gt;5&lt;/span&gt; hours ago              Up &lt;span class="m"&gt;5&lt;/span&gt; hours                                           2ede2591-1ec0-4c2b-a3ef-59697ff02ba7-n1/carina-svcd  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到shadowsocks服务已经在运行了。&lt;/p&gt;
&lt;p&gt;使用port命令，可以查看shadowsocks服务的IP和端口：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  docker port shadowsocks
12306/tcp -&amp;gt; 104.130.22.24:12306
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;记住shadowsocks的IP和端口号，待会儿需要填入shadowsocks代理软件中。&lt;/p&gt;
&lt;h3&gt;使用shadowsocks科学上网&lt;/h3&gt;
&lt;p&gt;（1）下载Windows系统的&lt;a href="http://pan.baidu.com/s/1c05CZT2"&gt;Shadowsocks客户端&lt;/a&gt;，解压到任意目录，运行其中的shadowsocks.exe。&lt;/p&gt;
&lt;p&gt;（2）添加shadowsocks的服务器IP和端口号、密码。点确定即可。&lt;/p&gt;
&lt;p&gt;&lt;img alt="shadowsocks" src="http://ww2.sinaimg.cn/large/9f9f764egw1f2ygf33os1j207c07vaai.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;（3）右键点击任务栏中shadowsocks.exe的图标，勾选“启用系统代理”。&lt;/p&gt;
&lt;p&gt;（4）打开任意浏览器，即可自由上网。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.rendoumi.com/wan-quan-mian-fei-de-shadowsocksfu-wu-qi/"&gt;不花一分钱，搭建一个完全免费的Shadowsocks服务器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://liujin.me/blog/2015/05/27/Docker-DigitalOcean-Shadowsocks-5-%E5%88%86%E9%92%9F%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"&gt;Docker + DigitalOcean + Shadowsocks 5分钟科学上网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leohxj.gitbooks.io/a-programmer-prepares/content/effciency/break-through-intranet.html"&gt;程序员的自我修养&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ishadowsocks.net/"&gt;shadowsocks客户端&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary><category term="工具"></category><category term="教程"></category></entry><entry><title>Docker学习</title><link href="http://www.wengweitao.com/dockerxue-xi.html" rel="alternate"></link><published>2016-04-16T22:48:00+08:00</published><author><name>wwt</name></author><id>tag:www.wengweitao.com,2016-04-16:dockerxue-xi.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Docker是诞生于2013年的一个开源项目，在开源之后就受到了广泛的关注和讨论。3年时间过去了，Docker已经成为了广大程序员耳熟能详的一个工具，在业界也得到了非常广泛的应用。我也一直对Docker十分感兴趣，便抽空了解了下Docker。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;简介&lt;/h3&gt;
&lt;p&gt;了解Docker的人都知道它的概念与集装箱类似，但是Docker英文翻译过来的名字是“码头工人”。那么问题来了：Docker到底是码头工人还是集装箱呢？这就需要先简单的介绍一下集装箱的历史了。在1956年集装箱出现之前，货物的运输是一件成本非常高的事情，物流系统非常的零散和低效。假设内陆的地方想将大米出口到国外，那么首先需要工人将大米装到汽车上，然后通过汽车运输到沿海的港口，港口上的码头工人需要将大米从汽车转到轮船之上。可以看出这个过程中需要大量的人力作为货物的中转，不同运输工具之间的转换也存在着消耗，成本很高而且效率极低。于是，就出现了集装箱这个改变世界的箱子。集装箱是一个标准化的箱子，规定了标准的尺寸，使得不同的货物都可以装在集装箱中，无论是在公路或者海洋等各种运输场景中，集装箱都可以不用转变形态直接运输，中间的转运工作可以通过相同的搬运机械自动化运作。而且，集装箱也为不同的货物之间实现了隔离和保护，使得不同货物之间不会相互影响，也避免了外部环境对货物的影响。随着集装箱的出现，大大提高了运输的效率，使得码头工人这个职业基本消失。可以说，集装箱是人类现代社会最重要的发明之一，没有集装箱就没有经济的全球化。&lt;strong&gt;Docker就是软件世界的集装箱化&lt;/strong&gt;。Docker允许开发人员将一个应用及其所有的依赖装到一个标准化的单元，这保证了不管它所运行的环境如何，它总是可以相同的运行。&lt;/p&gt;
&lt;p&gt;&lt;img alt="logo" src="http://ww4.sinaimg.cn/large/9f9f764egw1f2ycqndgtqj208301ygln.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Docker是使用Go语言实现的一个开源项目，目标是&lt;strong&gt;实现轻量级的操作系统虚拟化解决方案&lt;/strong&gt;，是在Linux容器（LXC）的基础上进行封装，让用户不必操心容器的管理细节，使得用户操作Docker容器就像操作一个快速轻量级的虚拟机一样简单。Docker提供了一套集成的工具，使得开发人员可以在任何地方构建、传输和运行应用。Docker提供的这种CaaS（Docker Container as a Service）服务具有以下几个优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;灵活性：开发人员可以自由的定义环境，更加容易和快速的创建和部署应用；&lt;/li&gt;
&lt;li&gt;可控制性：开发人员可以控制从基础设施到应用层面的所有代码，并且提供了对IT运维操作环境的标准化、安全和扩展。&lt;/li&gt;
&lt;li&gt;可移植性：开发人员不定担心开发和生产环境的差异，使得容器可以运行于所有主流的Linux发行版和Windows操作系统中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从实现的功能上看，Docker与虚拟机有着相似的地方，但是Docker更加高效。虚拟机中每一个封装的应用都包括完整的guest操作系统，所以大小很可能有几十GB大；而Docker包括应用和其所有的依赖，但是与其他容器共享操作系统内核。他们作为独立的进程在宿主操作系统的用户空间中运行。并且不会限制于某些特定的设施，可以运行于任何计算机上。下图展现了虚拟机与Docker的区别。&lt;/p&gt;
&lt;p&gt;&lt;img alt="虚拟机与Docker" src="http://ww1.sinaimg.cn/large/9f9f764egw1f2ycodfhlwj20or0eeacy.jpg" /&gt;&lt;/p&gt;
&lt;h3&gt;安装Docker&lt;/h3&gt;
&lt;p&gt;Docker可以在Linux、Mac OSX以及Windows上进行安装。本文以Linux系统的Cent OS发行版为例进行说明。在Cent OS中安装Docker可以直接使用yum包管理工具进行安装。&lt;/p&gt;
&lt;p&gt;（1）首先，确保当前的yum软件源是最新的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;（2）增加Docker的yum软件源：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo tee /etc/yum.repos.d/docker.repo &lt;span class="s"&gt;&amp;lt;&amp;lt;-&amp;#39;EOF&amp;#39;&lt;/span&gt;
&lt;span class="s"&gt;[dockerrepo]&lt;/span&gt;
&lt;span class="s"&gt;name=Docker Repository&lt;/span&gt;
&lt;span class="s"&gt;baseurl=https://yum.dockerproject.org/repo/main/centos/$releasever/&lt;/span&gt;
&lt;span class="s"&gt;enabled=1&lt;/span&gt;
&lt;span class="s"&gt;gpgcheck=1&lt;/span&gt;
&lt;span class="s"&gt;gpgkey=https://yum.dockerproject.org/gpg&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;（3）使用yum install安装Docker：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install docker-engine
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;（4）查看是否安装成功：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  docker docker --version
Docker version 1.7.1, build 786b29d
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行一个官方示例，检查Docker是否能正常运行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  docker docker run hello-world
Hello from Docker.
This message shows that your installation appears to be working correctly.
To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the &lt;span class="s2"&gt;&amp;quot;hello-world&amp;quot;&lt;/span&gt; image from the Docker Hub.
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.
To try something more ambitious, you can run an Ubuntu container with:
 $ docker run -it ubuntu bash
Share images, automate workflows, and more with a free Docker Hub account:
 https://hub.docker.com
For more examples and ideas, visit:
 https://docs.docker.com/userguide/
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;容器和镜像的概念&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;容器（container）&lt;/strong&gt;：容器可以看成一个精简的Linux操作系统，利用容器来运行应用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;镜像（image）&lt;/strong&gt;：镜像是可以载入到容器中的软件，一个镜像可以是一个非常简单的应用也可以是复杂的应用，这取决于你如何构建它。例如上面例子中的&lt;code&gt;hello-world&lt;/code&gt;就是一个镜像。&lt;/p&gt;
&lt;p&gt;当我们运行&lt;code&gt;docker docker run hello-world&lt;/code&gt;，Docker引擎会完成以下几个过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检查你是否拥有hello-world软件镜像&lt;/li&gt;
&lt;li&gt;从Docker Hub（一个Docker镜像仓库）下载镜像&lt;/li&gt;
&lt;li&gt;将镜像加载到容器中并且运行它&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;运行镜像&lt;/h3&gt;
&lt;p&gt;每个人都可以创建各种各样的Docker镜像，并且发布在Docker Hub上。我们可以通过Docker Hub找到这些镜像。&lt;/p&gt;
&lt;p&gt;（1）寻找whalesay镜像&lt;/p&gt;
&lt;p&gt;whalesay是一个从cowsay改变得到的一个应用，将原本牛的图案改成了Docker的logo中的鲸。打开Docker Hub：https://hub.docker.com/，在搜索框中输入&lt;code&gt;whalesay&lt;/code&gt;搜索该镜像，找到&lt;code&gt;docker/whalesay&lt;/code&gt;后点击进去，可以看到关于这个镜像的详细信息。&lt;/p&gt;
&lt;p&gt;（2）运行whalesay镜像&lt;/p&gt;
&lt;p&gt;可以使用&lt;code&gt;docker run&lt;/code&gt;命令运行该镜像：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run docker/whalesay cowsay boo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;效果如下所示：&lt;/p&gt;
&lt;p&gt;&lt;img alt="whalesay" src="http://ww3.sinaimg.cn/large/9f9f764egw1f2ydebuahjj20d707aaae.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;此时，可以运行&lt;code&gt;docker images&lt;/code&gt;可以查看到whalesay镜像已经下载到本地。&lt;/p&gt;
&lt;h3&gt;创建镜像&lt;/h3&gt;
&lt;p&gt;（1）写一个Dockerfile&lt;/p&gt;
&lt;p&gt;首先，需要创建一个Dockerfile，包含了如何创建镜像的一些指令。&lt;/p&gt;
&lt;p&gt;新建一个目录，这个目录就是构建镜像的上下文，包括了创建镜像所需要的一切：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir myFirstDocker
&lt;span class="nb"&gt;cd&lt;/span&gt; myFirstDocker
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然后创建Dockerfile文件，然后输入以下内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FROM docker/whalesay:latest
RUN apt-get -y update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y fortunes
CMD /usr/games/fortune -a &lt;span class="p"&gt;|&lt;/span&gt; cowsay
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;FROM&lt;/code&gt;告诉Docker镜像是基于哪个镜像的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RUN&lt;/code&gt;在创建中运行apt-get安装fortunes应用，这个应用可以随机产生一个名人名言谚语等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CMD&lt;/code&gt;一旦镜像拥有了需要的应用之后，只需要将镜像加载好后运行应用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt;注释&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（2）从Dockerfile构建一个镜像&lt;/p&gt;
&lt;p&gt;编写好Dockerfile后，就可以使用&lt;code&gt;docker build&lt;/code&gt;命令生成一个镜像：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker build -t docker-whale .
Sending build context to Docker daemon 158.8 MB
...snip...
Removing intermediate container a8e6faa88df3
Successfully built 7d9495d03763
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;（3）了解构建镜像的过程&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker build -t docker-whale .&lt;/code&gt;命令，从当前目录读取Dockerfile，并且构建了一个称为docker-whale的镜像。包含了以下几个过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Docker检查确保所有构建需要的东西都满足&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Docker载入whalesay镜像&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更新apt-get包管理器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载fortunes应用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;完成构建并输出结果&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（4）运行新构建的docker-whale&lt;/p&gt;
&lt;p&gt;首先，可以使用&lt;code&gt;docker images&lt;/code&gt;命令查看新的docker-whale在本地已经存在。然后，运行之：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;➜  myFirstDocker docker run docker-whale
 ________________________________________ 
/ The truth you speak has no past and no &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; future. It is, and that&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s all it needs &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="se"&gt;\ &lt;/span&gt;to be.                                 /
 ---------------------------------------- 
    &lt;span class="se"&gt;\&lt;/span&gt;
     &lt;span class="se"&gt;\&lt;/span&gt;
      &lt;span class="se"&gt;\ &lt;/span&gt;    
                    &lt;span class="c1"&gt;##        .            &lt;/span&gt;
              &lt;span class="c1"&gt;## ## ##       ==            &lt;/span&gt;
           &lt;span class="c1"&gt;## ## ## ##      ===            &lt;/span&gt;
       /&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;___/ &lt;span class="o"&gt;===&lt;/span&gt;        
  ~~~ &lt;span class="o"&gt;{&lt;/span&gt;~~ ~~~~ ~~~ ~~~~ ~~ ~ /  &lt;span class="o"&gt;===&lt;/span&gt;- ~~~   
       &lt;span class="se"&gt;\_&lt;/span&gt;_____ o          __/            
        &lt;span class="se"&gt;\ &lt;/span&gt;   &lt;span class="se"&gt;\ &lt;/span&gt;       __/             
          &lt;span class="se"&gt;\_&lt;/span&gt;___&lt;span class="se"&gt;\_&lt;/span&gt;_____/  
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;使用Docker Hub&lt;/h3&gt;
&lt;p&gt;Docker Hub有点像GitHub上面有很多用户创建的各种镜像，可以使用push和pull等命令发布和使用这些镜像。&lt;/p&gt;
&lt;p&gt;（1）注册账号&lt;/p&gt;
&lt;p&gt;首先在Docker Hub上创建一个账号。&lt;/p&gt;
&lt;p&gt;（2）新建仓库&lt;/p&gt;
&lt;p&gt;新建一个仓库，用来发布刚刚创建的docker-whale&lt;/p&gt;
&lt;p&gt;（3）修改镜像标签&lt;/p&gt;
&lt;p&gt;先使用&lt;code&gt;docker images&lt;/code&gt;查看镜像的repo名字和IMAGE ID。&lt;/p&gt;
&lt;p&gt;&lt;img alt="images" src="http://ww4.sinaimg.cn/large/9f9f764egw1f2ydwbklvvj20mg03m0u0.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;repo名字为docker-whale不包括命名空间，需要根据你的Docker Hub的账号包括命名空间如：&lt;code&gt;nurnoch/docker-whale&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;然后使用docker tag命令修改docker-whale镜像的标签：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker tag sha256:3ae87 nurnoch/docker-whale:latest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再次使用docker images就可以看到新的一个tagged image了。&lt;/p&gt;
&lt;p&gt;（4）上传镜像&lt;/p&gt;
&lt;p&gt;登陆到Docker Hub：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker login --username&lt;span class="o"&gt;=&lt;/span&gt;nurnoch --email&lt;span class="o"&gt;=&lt;/span&gt;wengweitao@foxmail.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用docker push上传镜像到仓库：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker push nurnoch/docker-whale
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;（5）运行上传的镜像&lt;/p&gt;
&lt;p&gt;先将本地的映像删除：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker rmi -f sha256:3ae87
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以跟IMAGE ID或者镜像名。&lt;/p&gt;
&lt;p&gt;然后运行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run nurnoch/docker-whale
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上就是Docker的简单介绍。&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/"&gt;Docker官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://book.douban.com/subject/2354988/"&gt;集装箱改变世界&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ipn.li/kernelpanic/8/"&gt;内和恐慌#8：「集装箱化」与运维管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://v.youku.com/v_show/id_XNzUyMzA4MTE2.html?from=y1.6-91.3.1.5bdbf57c947311e3b8b7"&gt;罗辑思维：改变世界的箱子 84  &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.gitbook.com/book/yeasy/docker_practice"&gt;Docker —— 从入门到实践&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary><category term="工具"></category><category term="教程"></category></entry><entry><title>CentOS 升级 gcc 和 g++ 的方法</title><link href="http://www.wengweitao.com/centos-sheng-ji-gcc-he-g-de-fang-fa.html" rel="alternate"></link><published>2015-05-12T19:02:00+08:00</published><author><name>wwt</name></author><id>tag:www.wengweitao.com,2015-05-12:centos-sheng-ji-gcc-he-g-de-fang-fa.html</id><summary type="html">&lt;p&gt;CentOS 系统自带的 gcc 或者 g++ 的版本是：g++ (GCC) 4.4.6. GCC 版本太旧，导致了很多使用上的不便，如：无法使用g++ -std=c++11 命令来编译 C++11、无法使用Vim的很多插件（YouCompleteMe等）。因此，有必要对它进行升级。&lt;/p&gt;
&lt;p&gt;对 GCC 升级无法直接使用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum update gcc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下是升级的详细过程。&lt;/p&gt;
&lt;h3&gt;1.使用 redhat developer toolset 1.1 的repo，安装GCC&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /etc/yum.repos.d

wget http://people.centos.org/tru/devtools-1.1/devtools-1.1.repo 

yum --enablerepo&lt;span class="o"&gt;=&lt;/span&gt;testing-1.1-devtools-6 install devtoolset-1.1-gcc devtoolset-1.1-gcc-c++
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2. 替换系统中原来的GCC&lt;/h3&gt;
&lt;p&gt;通过通过第一步会把 GCC 安装到以下目录：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/opt/centos/devtoolset-1.1/root/usr/bin/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来需要修改系统的配置，使默认的 gcc 和 g++ 命令使用的是新安装的版本。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ln -s /opt/centos/devtoolset-1.1/root/usr/bin/* /usr/local/bin/
&lt;span class="nb"&gt;hash&lt;/span&gt; -r
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在查看 g++ 的版本号：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;g++ --version
g++ &lt;span class="o"&gt;(&lt;/span&gt;GCC&lt;span class="o"&gt;)&lt;/span&gt; 4.7.2 &lt;span class="m"&gt;20121015&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Red Hat 4.7.2-5&lt;span class="o"&gt;)&lt;/span&gt;
Copyright &lt;span class="o"&gt;(&lt;/span&gt;C&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;2012&lt;/span&gt; Free Software Foundation, Inc.
This is free software&lt;span class="p"&gt;;&lt;/span&gt; see the &lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; copying conditions.  There is NO
warranty&lt;span class="p"&gt;;&lt;/span&gt; not even &lt;span class="k"&gt;for&lt;/span&gt; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;已经从4.4.6升级到4.7.2了。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Reference&lt;/h2&gt;
&lt;p&gt;http://superuser.com/questions/381160/how-to-install-gcc-4-7-x-4-8-x-on-centos/542091#542091&lt;/p&gt;</summary><category term="教程、Linux"></category></entry><entry><title>终端窗口管理神器——tmux</title><link href="http://www.wengweitao.com/zhong-duan-chuang-kou-guan-li-shen-qi-tmux.html" rel="alternate"></link><published>2015-05-11T09:12:00+08:00</published><author><name>wwt</name></author><id>tag:www.wengweitao.com,2015-05-11:zhong-duan-chuang-kou-guan-li-shen-qi-tmux.html</id><summary type="html">&lt;h2&gt;什么是tmux&lt;/h2&gt;
&lt;p&gt;tmux是一个终端的复用器（terminal multiplexer），可以简单理解为一个终端的窗口管理程序。相比系统自带的 screen 功能要强大许多。其使用场景和特性包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当你使用SSH连接到服务器的时候，由于网络掉线导致连接中断（这是经常发生的。。。）。当你重新连接后，所有的工作现场丢失了。你还得重新打开之前的各种窗口，进入各种很深的目录，非常麻烦。而如果使用tmux，即时掉线之后，重新连接也能直接回到之前的工作环境，极大提高工作的效率。&lt;/li&gt;
&lt;li&gt;可以完全通过键盘操控&lt;/li&gt;
&lt;li&gt;支持自定义的按键绑定模式，例如设置成vim按键绑定模式&lt;/li&gt;
&lt;li&gt;可以在一个SSH连接下打开多个会话、窗口，也可以对窗口进行各种分割，效果如下图所示。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="tmux示例" src="http://tmux.sourceforge.net/tmux4.png" /&gt;&lt;/p&gt;
&lt;h2&gt;tmux的基本概念&lt;/h2&gt;
&lt;p&gt;首先，需要先安装tmux：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install tmux
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安装好后，直接输入 &lt;strong&gt;tmux&lt;/strong&gt; 即可运行 tmux. &lt;/p&gt;
&lt;p&gt;tmux 包括以下3个基本概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;session：&lt;/strong&gt;会话，是一组窗口的集合，通常同一个任务可以放入一个session。可以同时打开多个session，每个session可以有自己的名字方便任务的切换。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;window：&lt;/strong&gt;窗口，一个会话包含多个窗口，类似于一个tab，各个window也可以有自己的编号。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;panel：&lt;/strong&gt;面板，一个窗口包含多个面板，就是窗口中不同的小块窗口。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="session" src="http://cenalulu.github.io/images/linux/tmux/concept.jpg" /&gt;
&lt;em&gt;&lt;a href="http://cenalulu.github.io/images/linux/tmux/concept.jpg"&gt;图片来源&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;session会在tmux窗口的左下角显示，window会以tab形式显示在其后，并且会以当前活动的程序自动命名。以上图为例，这是第3个session，一共有3个window，分别是vim, bash, ssh。而panel就是用格子分割开的各个区块。&lt;/p&gt;
&lt;h2&gt;tmux的基本用法&lt;/h2&gt;
&lt;p&gt;tmux 指令必须包含一个前缀（就是一组按键），你必须先按下前缀以后，系统才知道你后面的命令是tmux指令。系统默认的前缀指令是 &lt;strong&gt;ctrl + b&lt;/strong&gt;，例如你要新建一个窗口就先按下：&lt;strong&gt;ctrl + b&lt;/strong&gt;，然后再按：&lt;strong&gt;c&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;下面是几组常用的tmux指令（所有的前缀用prefix代替）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;prefix + ? ： 帮助，可以查看所有的tmux指令，使用q退出&lt;/li&gt;
&lt;li&gt;prefix + s： 列出所有session编号,并进行选择切换&lt;/li&gt;
&lt;li&gt;prefix + d： 离开当前session&lt;/li&gt;
&lt;li&gt;prefix + $： 重命名当前session&lt;/li&gt;
&lt;li&gt;prefix  + c：新建一个窗口&lt;/li&gt;
&lt;li&gt;prefix  + &amp;amp;： 关闭当前窗口&lt;/li&gt;
&lt;li&gt;prefix + n： 切换到下一个窗口&lt;/li&gt;
&lt;li&gt;prefix + w：列出所有窗口编号,并进行选择切换&lt;/li&gt;
&lt;li&gt;prefix + 窗口号： 切换到某个窗口&lt;/li&gt;
&lt;li&gt;prefix + "： 垂直拆分出一个panel&lt;/li&gt;
&lt;li&gt;prefix + %： 水平拆分出一个panel&lt;/li&gt;
&lt;li&gt;prefix + o： 切换到下一个panel&lt;/li&gt;
&lt;li&gt;prefix + !： 关闭所有的panel&lt;/li&gt;
&lt;li&gt;prefix + x： 关闭当前panel&lt;/li&gt;
&lt;li&gt;prefix + z： 暂时将当前的panel放到最大&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;更多的tmux指令，可以参考&lt;a href="http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man1/tmux.1?query=tmux&amp;amp;sec=1"&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;对tmux进行个性化配置&lt;/h2&gt;
&lt;p&gt;默认的配置，可以比较不习惯，可以编辑 $HOME/.tmux.conf 文件，对tmux进行配置。&lt;/p&gt;
&lt;p&gt;1.将前缀更改为 &lt;strong&gt;ctrl + a&lt;/strong&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt; -g prefix ^a
unbind ^b
&lt;span class="nb"&gt;bind&lt;/span&gt; a send-prefix
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;保存后，为了使配置生效：
先按 &lt;strong&gt;ctrl+b&lt;/strong&gt;，然后输入&lt;strong&gt;：&lt;/strong&gt;，进入命令行模式， 在命令行模式下输入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source-file ~/.tmux.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在就把前缀改为了ctrl + a了。&lt;/p&gt;
&lt;p&gt;2.水平或垂直分割窗口&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;unbind &lt;span class="s1"&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt; - splitw -v &lt;span class="c1"&gt;# 分割成上下两个窗口&lt;/span&gt;
unbind %
&lt;span class="nb"&gt;bind&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; splitw -h &lt;span class="c1"&gt;# 分割成左右两个窗口&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.切换窗格设置为和Vim一样&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# navigate panes with hjkl&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt; h &lt;span class="k"&gt;select&lt;/span&gt;-pane -L
&lt;span class="nb"&gt;bind&lt;/span&gt; j &lt;span class="k"&gt;select&lt;/span&gt;-pane -D
&lt;span class="nb"&gt;bind&lt;/span&gt; k &lt;span class="k"&gt;select&lt;/span&gt;-pane -U
&lt;span class="nb"&gt;bind&lt;/span&gt; l &lt;span class="k"&gt;select&lt;/span&gt;-pane -R
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4.panel大小调整&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;bind&lt;/span&gt; ^k resizep -U &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="c1"&gt;# 跟选择窗格的设置相同，只是多加 Ctrl（Ctrl-k）&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt; ^j resizep -D &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="c1"&gt;# 同上&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt; ^h resizep -L &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt; ^l resizep -R &lt;span class="m"&gt;10&lt;/span&gt; &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;5.交换两个窗格&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;bind&lt;/span&gt; ^u swapp -U &lt;span class="c1"&gt;# 与上窗格交换 Ctrl-u&lt;/span&gt;
&lt;span class="nb"&gt;bind&lt;/span&gt; ^d swapp -D &lt;span class="c1"&gt;# 与下窗格交换 Ctrl-d&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里就不一一列举，所有的配置。大家可以根据自己的习惯和喜好进行更改。以下是几个配置供大家参考：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;https://github.com/gpakosz/.tmux&lt;/li&gt;
&lt;li&gt;https://github.com/tony/tmux-config&lt;/li&gt;
&lt;li&gt;https://gist.github.com/spicycode/1229612&lt;/li&gt;
&lt;li&gt;http://zanshin.net/2013/09/05/my-tmux-configuration/&lt;/li&gt;
&lt;/ol&gt;</summary><category term="tmux"></category></entry><entry><title>Linux上搭建VPN服务器</title><link href="http://www.wengweitao.com/linuxshang-da-jian-vpnfu-wu-qi.html" rel="alternate"></link><published>2015-05-01T21:21:00+08:00</published><author><name>wwt</name></author><id>tag:www.wengweitao.com,2015-05-01:linuxshang-da-jian-vpnfu-wu-qi.html</id><summary type="html">&lt;p&gt;今天是五一劳动节，也就是五月份的第一天，不巧的是校园上网账号欠费了，导致无法通过认证上网。于是，就琢磨着如何不通过认证直接上网。实验室有几台服务器，这些服务器都无需认证可直接访问外网，很自然的就想到以下两种方法：&lt;/p&gt;
&lt;p&gt;（1）在服务器上设置代理服务器，然后在自己的PC和iPhone上设置代理上网&lt;/p&gt;
&lt;p&gt;（2）在服务器上搭建一个VPN PPTP服务器，在PC和iPhone上新建一个VPN连接上网。&lt;/p&gt;
&lt;p&gt;根据校园网的环境和平时的使用情况，最终决定采用VPN的方式。接下来，我以Red Hat系统为例，详细说明搭建的过程。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;1. 判断PPP是否可用&lt;/h2&gt;
&lt;p&gt;首先，我们需要检查服务器是否支持搭建PPTP，在shell中输入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat /dev/ppp

cat: /dev/ppp: 没有那个设备或地址
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果出现以上提示，说明这台服务器PPP可用；若出现"Permission denied"提示，则无法使用PPP，考虑更换一台服务器。&lt;/p&gt;
&lt;h2&gt;2. 安装所需的软件包&lt;/h2&gt;
&lt;p&gt;主要需要以下3个软件包：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PPP：点对点协议&lt;/li&gt;
&lt;li&gt;PPTP：点对点通道协议&lt;/li&gt;
&lt;li&gt;IPtables：设定IP包转发规则&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;（1）安装PPP&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;直接使用yum安装即可&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install ppp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;（2）安装IPtables&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通常Linux系统上都自带安装好了iptables，如果没有可以使用yum进行安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yum install iptables
cp -rpf /etc/sysconfig/iptables /etc/sysconfig/iptables.pptpsave
&lt;span class="nb"&gt;cd&lt;/span&gt; /usr/src
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;（3）安装PPTP套件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你的系统直接yum那么可以直接通过yum进行安装，但是我的系统是Red Hat 4.4.6-4，yum中没有提供pptp套件的rpm包，只能自己先下载到本地。&lt;/p&gt;
&lt;p&gt;到&lt;a href="http://poptop.sourceforge.net/yum/stable/"&gt;这里&lt;/a&gt;下载适合你系统的rpm包。可以使用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat /proc/version
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;查看Linux系统信息。&lt;/p&gt;
&lt;p&gt;注意：一定要正确选择适合自己系统的rpm包，如果下载错误将无法完成安装。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget http://poptop.sourceforge.net/yum/stable/rhel6/x86_64/pptpd-1.4.0-1.el6.x86_64.rpm

rpm -ivh pptpd-1.4.0-1.el6.x86_64.rpm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;（4）进行配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用Vim编辑 /etc/sysctl.conf 文件，将其中的一行内容修改为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;net.ipv4.ip_forward &lt;span class="o"&gt;=&lt;/span&gt; 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;复制以下所有命令，粘贴在shell中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sysctl -p
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;localip 192.168.240.1&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/pptpd.conf
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;remoteip 192.168.240.101-200&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/pptpd.conf
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ms-dns 8.8.8.8&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/ppp/options.pptpd
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ms-dns 8.8.4.4&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/ppp/options.pptpd
iptables --flush POSTROUTING --table nat
iptables --flush FORWARD
iptables -A INPUT -p tcp -m tcp --dport &lt;span class="m"&gt;1723&lt;/span&gt; -j ACCEPT
iptables -A INPUT -p gre -j ACCEPT
iptables -t nat -A POSTROUTING -s 192.168.240.0/24 -o eth0 -j MASQUERADE
service iptables save
service pptpd restart
service iptables restart
chkconfig pptpd on
chkconfig iptables on
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以上主要设置了VPN所使用的IP地址段、包转发规则等。VPN客户端将分配到的地址为：192.168.240.* 地址段，通过VPN服务器的eth0以太网接口转发对外的数据包（可以使用ifconfig查看本机对外通信的接口是否为eth0，若不是可自行更改）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（5）设置VPN账号和密码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你任意添加VPN账户，使用Vim编辑文件 /etc/ppp/chap-secrets 一行一个账户，如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wwt  pptpd  &lt;span class="m"&gt;123456&lt;/span&gt; *
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;分别表示账户名、VPN服务、密码、IP。&lt;/p&gt;
&lt;p&gt;现在，就可以在PC或者iPhone上连接VPN上网了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（6）客户端连接&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以Windows8.1为例。&lt;/p&gt;
&lt;p&gt;①打开网络和共享中心，点击“设置新的连接或网络”&lt;/p&gt;
&lt;p&gt;②选择“连接到工作区”，创建新的连接，一直下一步&lt;/p&gt;
&lt;p&gt;③填入VPN服务器IP地址和名称（名称可以任意），点击“创建”&lt;/p&gt;
&lt;p&gt;④点击桌面右下角网络网络连接的图标，选择创建的那个VPN连接，输入刚刚设置的用户名和密码即可。&lt;/p&gt;
&lt;p&gt;⑤访问http://ip.cn 可以看到你的IP已经变成了VPN服务器的IP。&lt;/p&gt;
&lt;p&gt;同样，在Mac OS X和iPhone上也可以非常容易的创建VPN连接。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过连接校园网内的VPN服务器上网，不仅不需要认证，而且当你不在学校的时候，还可以连接VPN下载文献论文，非常有用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;References:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.vixual.net/blog/archives/32"&gt;CentOS 5/6 快速安裝 VPN Server (PPTP)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cnblogs.com/sixiweb/archive/2012/11/20/2778732.html"&gt;Linux下搭建VPN服务器（CentOS、pptp）&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary><category term="教程"></category></entry><entry><title>Vim入门教程</title><link href="http://www.wengweitao.com/vimru-men-jiao-cheng.html" rel="alternate"></link><published>2015-04-16T20:12:00+08:00</published><author><name>wwt</name></author><id>tag:www.wengweitao.com,2015-04-16:vimru-men-jiao-cheng.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Vim 在编辑器中是神一样的存在，熟练掌握Vim将极大提高编辑文本的效率。本文将介绍Vim最基本的操作和技巧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;操作篇&lt;/h2&gt;
&lt;h3&gt;模式&lt;/h3&gt;
&lt;p&gt;Vim中一共有4种模式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;普通模式：启动Vim后，为普通模式，所有键都为功能键。&lt;/li&gt;
&lt;li&gt;插入模式：按下键i，进入插入模式，此时可以输入文本，返回普通模式，按Esc键。&lt;/li&gt;
&lt;li&gt;可视模式：按下键v，进入可视模式，可以移动光标对文本进行选择&lt;/li&gt;
&lt;li&gt;命令行模式：输入":"进入命令行模式，运行Vim的命令&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;最基本的移动&lt;/h3&gt;
&lt;p&gt;将光标上下左右移动，分别对应kjhl四个键。可以在前面加数字代表移动多个单位。如10j下移10行。&lt;/p&gt;
&lt;h3&gt;在文件中的移动&lt;/h3&gt;
&lt;p&gt;G-----移动到最后一行&lt;/p&gt;
&lt;p&gt;gg ------ 移动到第一行&lt;/p&gt;
&lt;p&gt;10G ------ 跳到第10行&lt;/p&gt;
&lt;p&gt;75% ----- 跳转到全文75%的地方&lt;/p&gt;
&lt;h3&gt;移动到指定字符&lt;/h3&gt;
&lt;p&gt;使用f,t,F,T可以再当前行快速移动。&lt;/p&gt;
&lt;p&gt;fx ----- 移动到光标右边的第一个’x'字符上&lt;/p&gt;
&lt;p&gt;Fx ----- 反方向查找，也就是移动到光标左边的指定字符上。&lt;/p&gt;
&lt;p&gt;tx ----- 移动到光标右边的第一个’x'字符之前&lt;/p&gt;
&lt;p&gt;Tx ----- 它移动到光标右边的指定字符'x'之后。&lt;/p&gt;
&lt;p&gt;; ----- 重复前一次输入的f, t, F, T命令&lt;/p&gt;
&lt;p&gt;, ----- 反方向重复前一次输入的f, t, F,T命令。&lt;/p&gt;
&lt;p&gt;";"和","这两个命令前也可以使用数字来表示倍数。也可以在命令前面使用数字，表示倍数。例如：
3fx ----- 移动到光标右边的第3个’x'字符上。&lt;/p&gt;
&lt;h3&gt;移动到行首行尾&lt;/h3&gt;
&lt;p&gt;0 ------ 移动到行首&lt;/p&gt;
&lt;p&gt;$ ------ 移动到行尾&lt;/p&gt;
&lt;p&gt;^ -------移动到第一个非空白字符行首&lt;/p&gt;
&lt;h3&gt;按单词移动&lt;/h3&gt;
&lt;p&gt;w ------ 移动光标的下一个单词的词首&lt;/p&gt;
&lt;p&gt;b ------ 移动光标的上一个单词的词首&lt;/p&gt;
&lt;p&gt;e ------ 移动光标的下一个单词的词尾&lt;/p&gt;
&lt;p&gt;ge ------ 移动光标的上一个单词的词尾&lt;/p&gt;
&lt;h3&gt;按窗口移动&lt;/h3&gt;
&lt;p&gt;H ------ 让光标跳到当前窗口的顶部
M ------ 让光标跳到当前窗口的中部
L ------ 让光标跳到当前窗口的底部&lt;/p&gt;
&lt;h3&gt;相对于光标滚屏&lt;/h3&gt;
&lt;p&gt;zt ------ 把光标所在行移动窗口的顶端
zz ------ 把光标所在行移动窗口的中间
zb ------ 把光标所在行移动窗口的底部&lt;/p&gt;
&lt;h3&gt;各种插入&lt;/h3&gt;
&lt;p&gt;i ------ 在光标处插入
a ------ 在光标后插入
o ------ 在当前行后插入一个新行
O ------ 在当前行前插入一个新行
cw ------ 替换从光标所在位置后到一个单词结尾的字符（c键和w键）&lt;/p&gt;
&lt;h3&gt;复制和粘贴&lt;/h3&gt;
&lt;p&gt;yy ------ 拷贝当前行
p ------ 粘贴
也可以在yy和p的前面加上数字：
3yy ------ 拷贝当前行起的3行
3p ------ 粘贴文本3次&lt;/p&gt;
&lt;h3&gt;查找&lt;/h3&gt;
&lt;p&gt;在normal模式下进行查找。
/ ------ 在Normal模式下输入”/“，然后输入你想查询的字符串，回车，就跳转到第一个匹配的地方了。
? ------ 与/相反的方向查找
n ------ 重复上一次的查找命令
N ------ 按相反方向重复上一次的查找命令&lt;/p&gt;
&lt;p&gt;在输入”/“或”?“后，用上、下光标键(或CTRL-P/CTRL-N)翻看历史记录，然后再次执行这个查找。
你还可以使用”q/“和”q?“命令，在vim窗口最下面打开一个新的窗口，这个窗口会列出你的查找历史记录，你可以使用任何vim编辑命令对此窗口的内容进行编辑，然后再按回车，就会对光标所在的行的内容进行查找。如下图所示：
&lt;img alt="q_search" src="./imgs/q_search.png" /&gt;&lt;/p&gt;
&lt;p&gt;* ------ 查找光标所在位置的单词，所有匹配的单词将高亮显示，并跳到下一个匹配项上
# ------ 查找光标所在位置的单词，所有匹配的单词将高亮显示，并跳到上一个匹配项上&lt;/p&gt;
&lt;p&gt;% ------ 括号匹配移动，即移动到与当前光标所在括号匹配的括号的位置&lt;/p&gt;
&lt;h3&gt;替换字符串&lt;/h3&gt;
&lt;p&gt;%s/源字符串/目的字符串/g ------ 将当前文档中所有的源字符串替换为目的字符串&lt;/p&gt;
&lt;h3&gt;删除、撤销和重做&lt;/h3&gt;
&lt;p&gt;dd ------ 删除当前行
dt ------ 删除当前行直到遇到它后面跟的符号
u ------ 撤销上一次操作
ctrl + r ------ redo重做 
如我用dd删除了当前行，如果后悔了不想删除可以使用u命令撤销，如果还是想删除可以使用ctrl + r继续删除。&lt;/p&gt;
&lt;h3&gt;打开、保存和退出&lt;/h3&gt;
&lt;p&gt;以下操作除非特别说明都在命令模式下操作，即每个命令前都要加入":"，如:q退出。
q ------ 退出当前文件
q! ------ 强制退出当前文件，不保存
w ------ 写入文件，存盘
wq ------ 保存退出当前文件
x ------ 保存退出当前文件
ZZ ------ 保存退出当前文件（普通模式下运行）
e filepath ------ 打开一个文件
saveas filepath ------ 另存为
bn ------ 当同时打开很多文件后，可以使用bn切换下一个文件。
bp ------ 当同时打开很多文件后，可以使用bp切换上一个文件。&lt;/p&gt;
&lt;h3&gt;重复命令&lt;/h3&gt;
&lt;p&gt;. ------ 重复上一次离开插入模式之前的全部命令
n&amp;lt; command &amp;gt; ------ 之前提到过的重复command命令n次&lt;/p&gt;
&lt;h3&gt;光标移动和命令配合使用&lt;/h3&gt;
&lt;p&gt;0y&lt;span class="math"&gt;\( ------ 复制本行（0移动到行首，y从这里开始复制，\)&lt;/span&gt;直到本行最后一个字符） 
ye ------ 复制从当前位置到下一个单词的词尾&lt;/p&gt;
&lt;h2&gt;技巧篇&lt;/h2&gt;
&lt;h3&gt;找出当前文档中相同的行&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:sort
/^\(.\+\)$\n\1
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;按时间撤消&lt;/h3&gt;
&lt;p&gt;Vim 7 包括了一个让用户跳转到任何编辑点之前或之后的新特性。如使用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:earlier 10m 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以返回到 10 分钟以前的编辑状态。
又如使用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:later 5s 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以跳转到 5 秒以后的编辑点。另外，可以使用 :undolist 命令查看缓冲区存在的撤销分支列表。而通过 :undo &amp;lt; number&amp;gt; 命令则能够移到撤销的某个分支。&lt;/p&gt;
&lt;h3&gt;删除当前文档的所有空行&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:g/^$/d
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;在每行的行首或行尾插入指定字符串&lt;/h3&gt;
&lt;p&gt;行首插入： &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:%s/^/your_word/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;行尾插入：  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:%s/$/your_word/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;例如在每行前面插入行号如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:%s/^/\=line(&amp;quot;.&amp;quot;)/
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;读取shell命令&lt;/h3&gt;
&lt;p&gt;如插入日期：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:r!date
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;:r 是:read的缩写，!是表明要运行一个shell命令，意思是我要把shell命令的输出读到vim里来。&lt;/p&gt;
&lt;h3&gt;统计某个单词出现的次数&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:%s/word//gn
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;统计的结果会在底部的状态栏显示。&lt;/p&gt;
&lt;h3&gt;Vim粘贴缩进问题&lt;/h3&gt;
&lt;p&gt;在Vim中粘贴Python代码后，缩进就全乱了。进入paste模式以后，可以在插入模式下粘贴内容，不会有任何变形。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;:set paste
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后使用:set nopaste恢复普通模式。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;好了，这篇文章已经说了不少关于Vim的基本操作和技巧，如果能掌握这些就可以比较流畅的使用Vim了。之后会有更多关于Vim操作的文章。&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }
    
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); ";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="Vim"></category></entry><entry><title>使用Pelican + Github Pages搭建个人博客</title><link href="http://www.wengweitao.com/shi-yong-pelican-github-pagesda-jian-ge-ren-bo-ke.html" rel="alternate"></link><published>2015-04-16T13:46:00+08:00</published><author><name>wwt</name></author><id>tag:www.wengweitao.com,2015-04-16:shi-yong-pelican-github-pagesda-jian-ge-ren-bo-ke.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近有不少同学问我，如何使用Python的Pelican搭建一个像我这样的一个个人博客。今天正好论文投稿结束，于是便抽出时间写这篇教程，希望对大家有用。有任何疑问欢迎在评论里说明。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;静态网站&lt;/h2&gt;
&lt;p&gt;早在多年之前，我就使用过WordPress + MySQL + Apache在国外的主机上搭建过个人博客。但是，对于个人博客而言，使用WordPress这种动态网站，还需要后台支持各种数据库，就显得过于臃肿。最近几年人们纷纷转向静态博客，加之Github Pages和Dropbox这些地方可以免费的放置这些静态页面，于是各种静态网站生成器便如雨后春笋出现，不完全统计的就有392种之多，这里由列出了所有的&lt;a href="https://staticsitegenerators.net/"&gt;Static site generator 列表及 Github 关注度排名&lt;/a&gt;。&lt;/p&gt;
&lt;h3&gt;什么是静态网站&lt;/h3&gt;
&lt;p&gt;静态的网站全部由静态网页构成，这些网页都是提前生成好的，不需要与后台数据库进行交交互，并且内容不会动态改变。静态网站具有如下特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;不需要数据库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访问速度更快&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基本没有安全性的问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使写作者更加专注于内容本身&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以我们只需要使用任何一个编辑器利用markdown写出文章，生成静态html即可，不需要php，也不需要数据库，你可以发布在任何你喜爱的服务器上。 也可以运行在 GitHub Page 上，也就是说，你可以使用 GitHub 的服务来搭建你的项目页面、博客或者网站，而且是完全免费的！&lt;/p&gt;
&lt;h3&gt;几种常见的静态博客&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;a href="https://github.com/jekyll/jekyll"&gt;Jekyll&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Jekyll可以说是静态网站的鼻祖，也是最著名的静态博客引擎。它是由GitHub创始人之一使用Ruby写的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;a href="https://github.com/imathis/octopress"&gt;Octopress&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Octopress是Jekyll的一个框架，但是降低了使用和部署的难度，目前也有大量的人在使用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;a href="https://github.com/hexojs/hexo"&gt;Hexo&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hexo是使用Node.js编写的快速、简单且功能强大静态博客框架，值得一提的是Hexo作者来自中国台湾。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.&lt;a href="https://github.com/spf13/hugo"&gt;Hugo&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hugo是使用Go语言编写的，特点是网站编译的速度非常快。记得在听IPN旗下的博客节目&lt;a href="https://ipn.li/kernelpanic/3/"&gt;内核恐慌&lt;/a&gt;中Rio谈到，使用Jekyll编译2000+网页需要12分钟左右，使用未经优化的Python多核程序进行编译需要5分钟左右，而使用Hugo只用了12秒！可见速度之快。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.&lt;a href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这就是本博客使用的框架，是Python编写的静态博客框架中最流行的一种。Pelican作者来自法国，pelican在法语中的是记事本的意思，非常适合用来作为个人博客，作为一名Pythoner使用Pelican也就理所当然了。&lt;/p&gt;
&lt;h2&gt;如何搭建静态博客&lt;/h2&gt;
&lt;p&gt;这一部分，我将详细介绍如何使用Github Pages + Pelican搭建一个非常cool且完全免费的个人博客。&lt;/p&gt;
&lt;h3&gt;在本地搭建Pelican&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1.安装&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;直接使用pip安装Pelican即可：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通常我们都是使用Markdown来书写文章，所以还需要Pelican支持Markdown：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;2.生成站点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在你的电脑上，建立一个目录，作为博客的主目录。我们假定，它的名称为blog。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir blog
&lt;span class="nb"&gt;cd&lt;/span&gt; blog
pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行一下命令后，就生成了一个站点，包含以下目录：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;blog/
├── content              # 存放输入的源文件
│   └── (pages)          # 存放手工创建的静态页面
├── output               # 生成的输出文件
├── develop_server.sh    # 方便开启测试服务器
├── Makefile             # 方便管理博客的Makefile
├── pelicanconf.py       # 主配置文件
└── publishconf.py       # 主发布文件，可删除
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;另外，生成的过程中需要配置一些东西，大部分都可以一路回车，选择默认设置，其中有一步需要你填写自己的网站域名，如果暂时没有，可以先随便设置，之后可以在pelicanconf.py文件中进行修改。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.创建文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接下来，就可以使用你喜欢的任何编辑器用markdown语法写你的第一篇文章。需要在每篇文章的开头填入以下关于文章的元信息：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Title: 文章标题
Date: 创建日期
Modified: 修改日期
Category: 文章分类，标志本文处于该分类下
Tags: 文章标签，标志本文处于该标签下
Slug: URL中该文章的链接地址
Author: 作者
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中Title和Category是必选的，其他的选择可以不写。在这些元信息的后面就是文章的内容了，例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2010&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Modified&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2010&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;publishing&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;
&lt;span class="n"&gt;Authors&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Alexis&lt;/span&gt; &lt;span class="n"&gt;Metaireau&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Conan&lt;/span&gt; &lt;span class="n"&gt;Doyle&lt;/span&gt;
&lt;span class="n"&gt;Summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Short&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;feeds&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;把以上的文件保存在content目录下，如保存为./content/test.md&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.生成静态页面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;返回博客的主目录（即包含pelican文件的目录），然后在命令行中运行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make html
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样就会自动在output目录下生成content目录下markdown文件对应的静态页面&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.预览站点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以先在本地预览站点，在博客主目录/output目录下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m SimpleHTTPServer
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在通过在浏览器中访问 http://localhost:8000/ 就可以看到你的站点了。&lt;/p&gt;
&lt;h3&gt;部署到Github上&lt;/h3&gt;
&lt;p&gt;Github就提供了&lt;a href="https://pages.github.com/"&gt;Pages&lt;/a&gt;功能，允许用户自定义项目首页，用来替代默认的源码列表。所以，github Pages可以被认为是用户编写的、托管在github上的静态网页。于是，我们就可以将生成的静态网页部署在Github Pages上。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.建立一个repository&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;登陆自己的Github主页，创建一个名字为：username.github.io 的repository。
其中必须修改username为自己账号的username，如：nurnoch.github.io&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.将生成的静态网站上传到repository&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;进入到output目录下，运行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git init
git remote add origin https://github.com/username/username.github.com.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将username替换为自己的github用户名，初始化，并添加远程repository，将会生成 .git的目录，然后我们将output目录下的所有文件上传到github：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add .
git commit -m &lt;span class="s2"&gt;&amp;quot;update&amp;quot;&lt;/span&gt;
git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此时可能需要输入账户和密码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.开始访问&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;访问http://username.github.io 就可以看到自己的个人博客站点了。
注意：第一次需要等待一段时间后才能看到。&lt;/p&gt;
&lt;h2&gt;配置Pelican&lt;/h2&gt;
&lt;p&gt;通过修改在博客根目录下的pelicanconf.py文件，可以对Pelican进行配置，具体配置可以&lt;a href="http://docs.getpelican.com/en/3.4.0/settings.html"&gt;参考这里&lt;/a&gt;。以下，是官方文档给出的一个配置例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;

&lt;span class="n"&gt;AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Alexis Métaireau&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Alexis&amp;#39; log&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://blog.notmyidea.org&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;TIMEZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Europe/Paris&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# can be useful in development, but set to False when you&amp;#39;re ready to publish&lt;/span&gt;
&lt;span class="n"&gt;RELATIVE_URLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;

&lt;span class="n"&gt;GITHUB_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://github.com/ametaireau/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;DISQUS_SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;blog-notmyidea&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;PDF_GENERATOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;REVERSE_CATEGORY_ORDER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;LOCALE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;C&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;DEFAULT_PAGINATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;DEFAULT_DATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2012&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;FEED_ALL_RSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;feeds/all.rss.xml&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_FEED_RSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;feeds/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;.rss.xml&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Biologeek&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://biologeek.org&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Filyb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://filyb.info/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Libert-fr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://www.libert-fr.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;N1k0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://prendreuncafe.com/blog/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Tarek Ziadé&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://ziade.org/blog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Zubin Mithra&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://zubin71.wordpress.com/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;

&lt;span class="n"&gt;SOCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;twitter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://twitter.com/ametaireau&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lastfm&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://lastfm.com/user/akounet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;github&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://github.com/ametaireau&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;

&lt;span class="c1"&gt;# global metadata to all the contents&lt;/span&gt;
&lt;span class="n"&gt;DEFAULT_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;yeah&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;it is&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;

&lt;span class="c1"&gt;# path-specific metadata&lt;/span&gt;
&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;extra/robots.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;robots.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# static paths will be copied without parsing their contents&lt;/span&gt;
&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;pictures&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;extra/robots.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# custom page generated with a jinja2 template&lt;/span&gt;
&lt;span class="n"&gt;TEMPLATE_PAGES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pages/jinja2_template.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jinja2_template.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# code blocks with line numbers&lt;/span&gt;
&lt;span class="n"&gt;PYGMENTS_RST_OPTIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;linenos&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;table&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# foobar will not be used, because it&amp;#39;s not in caps. All configuration keys&lt;/span&gt;
&lt;span class="c1"&gt;# have to be in caps&lt;/span&gt;
&lt;span class="n"&gt;foobar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;barbaz&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;我们可以根据自己的需求修改其中的：站点信息、时区和日期格式、默认语言和环境、主题、插件等。&lt;/p&gt;
&lt;h3&gt;增加sitemap&lt;/h3&gt;
&lt;p&gt;Pelican有着丰富的插件，可以配置sitemap插件, 生成 sitemap.xml 供搜索引擎使用。
首先，下载Pelican的所有插件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git://github.com/getpelican/pelican-plugins.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改pelicanconf.py文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLUGIN_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;u&amp;quot;pelican-plugins&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sitemap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 配置sitemap 插件&lt;/span&gt;
&lt;span class="n"&gt;SITEMAP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;format&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;xml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;priorities&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;articles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;indexes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;pages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;changefreqs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;articles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;monthly&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;indexes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;daily&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;pages&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;monthly&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用浏览器访问 &lt;em&gt;your domain name&lt;/em&gt;/sitemap.xml即可看到生成的 Sitemap 了。&lt;/p&gt;
&lt;h3&gt;增加评论功能&lt;/h3&gt;
&lt;p&gt;Pelican支持Disqus评论, 可以在Disqus上申请一个账号, 然后在pelicanconf.py里添加或修改DISQUS_SITENAME项:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DISQUS_SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;u&amp;quot;*your Disqus username*&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样你的博客就自动支持评论功能了。&lt;/p&gt;
&lt;h3&gt;在文章中插入本地图片&lt;/h3&gt;
&lt;p&gt;content目录下建立一个 imgs目录
然后在 pelicanconf.py 中添加:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;u&amp;quot;imgs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在文章中引用图片：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; ![aimg](/imgs/test.png)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;插入数学公式&lt;/h3&gt;
&lt;p&gt;Pelican默认是不支持数学公式的，如果想要方便的使用Pelican书写数学公式，可以&lt;a href="http://www.wengweitao.com/shi-pelicanzhi-chi-latexshu-xue-gong-shi.html"&gt;参考这里&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;绑定域名&lt;/h2&gt;
&lt;p&gt;你现在可以通过https://username.github.io 访问你的博客，但是如果拥有一个自己的域名不是更酷吗？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.购买一个域名&lt;/strong&gt;
很多地方都能买到域名，如godaddy等。价格基本都差不多，我是在&lt;a href="http://client.gegehost.com/domainchecker.php"&gt;GegeHost&lt;/a&gt;上买的。现在有好多种顶级域名，不过我还是推荐.com的。输入一个域名，如果没有人注册过，你就可以注册，付款后这个域名就归你了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.增加CNAME文件&lt;/strong&gt;
在repo的根目录下面，新建一个名为CNAME的文本文件，里面写入你要绑定的域名，如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;www.wengweitao.com&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在DNS要新建一条CNAME记录，指向username.github.com（请将username换成你的用户名）。这里推荐将你的域名添加到&lt;a href="https://www.dnspod.cn/"&gt;DNSPod&lt;/a&gt;，方便管理。&lt;/p&gt;
&lt;p&gt;Ok，现在你的个人博客站点就搭建好了！搭建容易，写博客难，希望各位都能坚持下去，把自己的心得体会分享给大家！&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;REFERENCES&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Static Site Generators: https://staticsitegenerators.net/&lt;/li&gt;
&lt;li&gt;Pelican Docs: http://docs.getpelican.com/en/3.5.0/&lt;/li&gt;
&lt;li&gt;github Pages和Jekyll入门：http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html&lt;/li&gt;
&lt;/ol&gt;</summary><category term="教程"></category></entry><entry><title>使Pelican支持LaTex数学公式</title><link href="http://www.wengweitao.com/shi-pelicanzhi-chi-latexshu-xue-gong-shi.html" rel="alternate"></link><published>2015-04-10T19:35:00+08:00</published><author><name>wwt</name></author><id>tag:www.wengweitao.com,2015-04-10:shi-pelicanzhi-chi-latexshu-xue-gong-shi.html</id><summary type="html">&lt;p&gt;作为一个技术博客，在写文章的时候，肯定需要经常输入各种公式符号。在之前写一篇文章的时候，发现Pelican默认是不支持编辑数学公式的。之前用过一些在线的markdonw编辑器，都是通过&lt;a href="https://github.com/mathjax/mathjax"&gt;MathJax&lt;/a&gt;来支持在markdown中书写数学公式，而且用起来非常的方便，语法基本和LaTex一样。于是，就找到了一种简单的使Pelican支持LaTex语法的数学公式，在这里分享给大家。&lt;/p&gt;
&lt;h2&gt;如何使Pelican支持渲染数学公式&lt;/h2&gt;
&lt;p&gt;最简单的方法就是使用Pelican的一个插件——&lt;a href="https://github.com/barrysteyn/pelican_plugin-render_math"&gt;pelican_plugin-render_math&lt;/a&gt;。
这个插件可以通过使用MathJax使pelican拥有渲染数学公式的能力，并且同时支持Markdown 和reStructuredText，用起来也非常的方便！&lt;/p&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;p&gt;在Pelican的安装目录中找到Pelican的配置文件pelicanconf.py，在文件中增加：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLUGIN_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;u&amp;quot;pelican-plugins&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;render_math&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;为了使插件生效，必须保证插件render_path所在的目录是可以访问的。通常，这个插件同其他插件都一起放在pelican-plugins目录中。&lt;/p&gt;
&lt;p&gt;没错，只要这一步你的pelican网站就可以通过mathjax渲染数学公式了！不需要更改任何模板文件。&lt;/p&gt;
&lt;p&gt;Just use and enjoy!&lt;/p&gt;
&lt;h2&gt;开始使用&lt;/h2&gt;
&lt;p&gt;对于内联的公式，将公式用\&lt;span class="math"&gt;\(...\\)&lt;/span&gt;包含起来，对于需要单独另起一行显示的公式使用\&lt;span class="math"&gt;\(\\)&lt;/span&gt;...\&lt;span class="math"&gt;\(\\)&lt;/span&gt;包含起来。例如：&lt;span class="math"&gt;\(1 + 1 = 2\)&lt;/span&gt; 和
&lt;/p&gt;
&lt;div class="math"&gt;$$1 + 1 = 2$$&lt;/div&gt;
&lt;h3&gt;书写一个质能守恒公式&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sb"&gt;$$&lt;/span&gt;&lt;span class="nb"&gt;E &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt; mc^&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="s"&gt;$$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="math"&gt;$$E=mc^2$$&lt;/div&gt;
&lt;h3&gt;希腊字母&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;\alpha&lt;/span&gt;&lt;span class="nb"&gt;, &lt;/span&gt;&lt;span class="nv"&gt;\beta&lt;/span&gt;&lt;span class="nb"&gt;, ..., &lt;/span&gt;&lt;span class="nv"&gt;\omega&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;
&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;\Gamma&lt;/span&gt;&lt;span class="nb"&gt;, &lt;/span&gt;&lt;span class="nv"&gt;\Delta&lt;/span&gt;&lt;span class="nb"&gt;, …, &lt;/span&gt;&lt;span class="nv"&gt;\Omega&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;小写希腊字母：&lt;span class="math"&gt;\(\alpha, \beta, ..., \omega\)&lt;/span&gt;
大写希腊字母：&lt;span class="math"&gt;\(\Gamma, \Delta, …, \Omega\)&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;上标和下标&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;x_i^&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="s"&gt;$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上标和下标分别为^ 和 _. 例如：&lt;span class="math"&gt;\(x_i^2\)&lt;/span&gt;.&lt;/p&gt;
&lt;h3&gt;求和与积分&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sb"&gt;$$&lt;/span&gt;&lt;span class="nv"&gt;\sum&lt;/span&gt;&lt;span class="nb"&gt;_{k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="nb"&gt;}^{n}&lt;/span&gt;&lt;span class="nv"&gt;\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="nb"&gt;}{k}&lt;/span&gt;&lt;span class="s"&gt;$$&lt;/span&gt; 
&lt;span class="sb"&gt;$$&lt;/span&gt;&lt;span class="nv"&gt;\sum&lt;/span&gt;&lt;span class="nb"&gt;_{k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="nb"&gt;}^n&lt;/span&gt;&lt;span class="nv"&gt;\frac&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="nb"&gt;}{k}&lt;/span&gt;&lt;span class="s"&gt;$$&lt;/span&gt; 
&lt;span class="sb"&gt;$$&lt;/span&gt;&lt;span class="nv"&gt;\int&lt;/span&gt;&lt;span class="nb"&gt;_a^b f&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;dx&lt;/span&gt;&lt;span class="s"&gt;$$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="math"&gt;$$\sum_{k=1}^{n}\frac{1}{k}$$&lt;/div&gt;
&lt;div class="math"&gt;$$\sum_{k=1}^n\frac{1}{k}$$&lt;/div&gt;
&lt;div class="math"&gt;$$\int_a^b f(x)dx$$&lt;/div&gt;
&lt;p&gt;如果你使用过LaTex那么用起来就非常熟悉了，语法基本和LaTex一样。可以访问 &lt;a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference"&gt;MathJax&lt;/a&gt; 参考更多使用方法。&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }
    
    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); ";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</summary><category term="教程"></category></entry></feed>